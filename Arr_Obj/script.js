// script.js

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
import { displayAnalyticsInNewPage } from './analytics.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', async () => {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await initDB();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
        await loadCategories();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await displayTransactions();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
});

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
 */
async function loadCategories() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        const [incomeCategories, expenseCategories] = await Promise.all([
            getCategories('income'),
            getCategories('expense')
        ]);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ select-—ç–ª–µ–º–µ–Ω—Ç—ã
        fillSelect('incomeType', incomeCategories);
        fillSelect('expenseType', expenseCategories);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
}

/**
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
 */
function fillSelect(selectId, categories) {
    const select = document.getElementById(selectId);
    if (!select) {
        console.error(`–≠–ª–µ–º–µ–Ω—Ç —Å ID ${selectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }

    select.innerHTML = categories.map(cat =>
        `<option value="${cat.value}">${cat.text}</option>`
    ).join('');
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥
    document.querySelectorAll('input[name="balance"]').forEach(radio => {
        radio.addEventListener('change', function () {
            toggleTransactionType();
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
    document.getElementById('incomeForm').addEventListener('submit', (e) => {
        e.preventDefault();
        handleTransactionSubmit('income');
    });

    document.getElementById('expenseForm').addEventListener('submit', (e) => {
        e.preventDefault();
        handleTransactionSubmit('expense');
    });

    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    document.getElementById('refreshBtn').addEventListener('click', displayTransactions);

    // –ö–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ø–æ–ª—É—á–∞–µ–º –∏–∑ HTML)
    const showAnalyticsBtn = document.getElementById('showAnalyticsBtn');
    showAnalyticsBtn.addEventListener('click', async () => {
        const transactions = await getAllTransactions();
        displayAnalyticsInNewPage(transactions); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    });
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤
 */
function toggleTransactionType() {
    const isIncome = document.querySelector('input[name="balance"][value="income"]').checked;
    document.getElementById('incomeForm').style.display = isIncome ? 'block' : 'none';
    document.getElementById('expenseForm').style.display = isIncome ? 'none' : 'block';
}


/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function handleTransactionSubmit(type) {
    const amountInput = document.getElementById(`${type}Amount`);
    const typeSelect = document.getElementById(`${type}Type`);

    const amount = parseFloat(amountInput.value);
    if (isNaN(amount) || amount <= 0) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ 0)');
        return;
    }

    const transaction = {
        category: type,
        type: typeSelect.options[typeSelect.selectedIndex].text,
        amount: type === 'income' ? amount : -amount,
        date: new Date().toISOString()
    };

    try {
        await addTransaction(transaction);
        amountInput.value = '';
        await displayTransactions();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function displayTransactions() {
    try {
        const transactions = await getAllTransactions();
        const output = document.getElementById('transactionsOutput');

        if (!output) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        transactions.sort((a, b) => new Date(b.date) - new Date(a.date));

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        output.innerHTML = generateTransactionsHTML(transactions);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        setupTransactionActions();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
function generateTransactionsHTML(transactions) {
    const formatDate = (dateStr) => {
        const date = new Date(dateStr);
        return date.toLocaleDateString('ru-RU');
    };

    let html = `
        <table>
            <thead>
                <tr>
                    <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                    <th>–¢–∏–ø</th>
                    <th>–°—É–º–º–∞</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
    `;

    transactions.forEach(trans => {
        const isIncome = trans.amount >= 0;
        const rowClass = isIncome ? 'income-row' : 'expense-row';
        const amountClass = isIncome ? 'positive' : 'negative';
        const amountSign = isIncome ? '+' : '-';
        const absoluteAmount = Math.abs(trans.amount);

        html += `
            <tr class="${rowClass}" data-id="${trans.id}">
                <td>${trans.type}</td>
                <td>${isIncome ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'}</td>
                <td class="${amountClass}">${amountSign}${absoluteAmount.toFixed(2)} ‚ÇΩ</td>
                <td>${formatDate(trans.date)}</td>
                <td class="actions">
                    <button class="edit-btn" data-id="${trans.id}">‚úèÔ∏è</button>
                    <button class="delete-btn" data-id="${trans.id}">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });

    html += `</tbody></table>`;
    return html;
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
 */
function setupTransactionActions() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
            const id = parseInt(e.target.getAttribute('data-id'));
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?')) {
                await deleteTransaction(id);
                await displayTransactions();
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
            const id = parseInt(e.target.getAttribute('data-id'));
            await showEditTransactionModal(id);
        });
    });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function showEditTransactionModal(id) {
    const transaction = await getTransactionById(id);
    if (!transaction) return;

    const isIncome = transaction.amount >= 0;
    const type = isIncome ? 'income' : 'expense';
    const amount = Math.abs(transaction.amount);

    const modalHTML = `
        <div id="editTransactionModal" class="modal">
            <div class="modal-content">
                <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h3>
                <form id="editTransactionForm">
                    <input type="hidden" id="editTransactionId" value="${transaction.id}">
                    <div class="form-row">
                        <select id="editTransactionCategory" class="category-select">
                            <option value="income" ${type === 'income' ? 'selected' : ''}>–î–æ—Ö–æ–¥</option>
                            <option value="expense" ${type === 'expense' ? 'selected' : ''}>–†–∞—Å—Ö–æ–¥</option>
                        </select>
                        <select id="editTransactionType" class="category-select">
                            ${generateCategoryOptions(type, transaction.type)}
                        </select>
                        <input type="number" id="editTransactionAmount" class="amount-input"
                               value="${amount.toFixed(2)}" min="0.01" step="0.01">
                    </div>
                    <div class="modal-buttons">
                        <button type="button" id="cancelEditBtn" class="modal-btn cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                        <button type="submit" class="modal-btn save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    </div>
                </form>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHTML);
    const modal = document.getElementById('editTransactionModal');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.style.display = 'flex';
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
    document.getElementById('editTransactionCategory').addEventListener('change', async (e) => {
        const newType = e.target.value;
        const categories = await getCategories(newType);
        const select = document.getElementById('editTransactionType');
        select.innerHTML = categories.map(cat =>
            `<option value="${cat.value}">${cat.text}</option>`
        ).join('');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    document.getElementById('cancelEditBtn').addEventListener('click', () => {
        modal.remove();
    });

    document.getElementById('editTransactionForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        await updateTransactionData();
        modal.remove();
        await displayTransactions();
    });
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
function generateCategoryOptions(currentType, currentValue) {
    let options = '';
    const types = currentType === 'income' ?
        ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–ü–µ–Ω—Å–∏—è', '–î—Ä—É–≥–æ–µ'] :
        ['–ï–¥–∞', '–ú–∞—à–∏–Ω–∞', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–î—Ä—É–≥–æ–µ'];

    types.forEach(type => {
        const selected = type === currentValue ? 'selected' : '';
        options += `<option value="${type}" ${selected}>${type}</option>`;
    });

    return options;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function updateTransactionData() {
    const id = parseInt(document.getElementById('editTransactionId').value);
    const category = document.getElementById('editTransactionCategory').value;
    const type = document.getElementById('editTransactionType').value;
    const amount = parseFloat(document.getElementById('editTransactionAmount').value);

    if (isNaN(amount) || amount <= 0) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
        return;
    }

    const transaction = {
        id: id,
        category: category,
        type: type,
        amount: category === 'income' ? amount : -amount,
        date: new Date().toISOString()
    };

    try {
        await new Promise((resolve, reject) => {
            const tx = db.transaction('transactions', 'readwrite');
            const store = tx.objectStore('transactions');
            const request = store.put(transaction);

            request.onsuccess = () => resolve();
            request.onerror = (event) => reject(event.target.error);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID
 */
async function getTransactionById(id) {
    return new Promise((resolve, reject) => {
        const tx = db.transaction('transactions', 'readonly');
        const store = tx.objectStore('transactions');
        const request = store.get(id);

        request.onsuccess = () => resolve(request.result);
        request.onerror = (event) => reject(event.target.error);
    });
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
 */
async function deleteTransaction(id) {
    return new Promise((resolve, reject) => {
        const tx = db.transaction('transactions', 'readwrite');
        const store = tx.objectStore('transactions');
        const request = store.delete(id);

        request.onsuccess = () => resolve();
        request.onerror = (event) => reject(event.target.error);
    });
}