// modalcategory.js
let currentCategoryType = 'income';

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
 * @param {string} type - –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ('income' –∏–ª–∏ 'expense')
 */
function showCategoryManagementModal(type) {
    currentCategoryType = type;
    const modal = document.getElementById('categoryModal');
    const modalTitle = document.getElementById('modalCategoryTitle');
    
    modalTitle.textContent = `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (${type === 'income' ? '–î–æ—Ö–æ–¥—ã' : '–†–∞—Å—Ö–æ–¥—ã'})`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    loadCategoryList(type);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.style.display = 'flex';
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
 */
async function loadCategoryList(type) {
    const categories = await getCategories(type);
    const categoryList = document.getElementById('categoryList');
    
    categoryList.innerHTML = `
                <ul class="categories-list">
            ${categories.map(cat => `
                <li class="category-item" data-value="${cat.value}">
                    <span class="category-name">${cat.text}</span>
                    <div class="category-actions">
                        <button class="action-btn edit-btn" data-value="${cat.value}">‚úèÔ∏è</button>
                        ${cat.value !== 'dr' ? `<button class="action-btn delete-btn" data-value="${cat.value}">üóëÔ∏è</button>` : ''}
                    </div>
                </li>
            `).join('')}
        </ul>
    `;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupCategoryListEvents();
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
function setupCategoryListEvents() {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    document.getElementById('addCategoryBtn').addEventListener('click', addNewCategory);
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const value = e.target.getAttribute('data-value');
            editCategory(value);
        });
    });
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const value = e.target.getAttribute('data-value');
            deleteExistingCategory(value);
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ Enter
    document.getElementById('newCategoryName').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addNewCategory();
        }
    });
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
async function addNewCategory() {
    const nameInput = document.getElementById('newCategoryName');
    const name = nameInput.value.trim();
    
    if (!name) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        return;
    }
    
    const newCategory = {
        value: name.toLowerCase().replace(/\s+/g, '_'),
        text: name
    };
    
    try {
        const categories = await getCategories(currentCategoryType);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (categories.some(cat => cat.value === newCategory.value)) {
            alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const updatedCategories = [...categories, newCategory];
        await updateCategories(currentCategoryType, updatedCategories);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        await loadCategoryList(currentCategoryType);
        nameInput.value = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ö
        if (typeof loadCategories === 'function') {
            await loadCategories();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
async function editCategory(categoryValue) {
    try {
        const categories = await getCategories(currentCategoryType);
        const category = categories.find(cat => cat.value === categoryValue);
        
        if (!category) {
            console.error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.text);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!newName) {
            console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }
        
        const trimmedName = newName.trim();
        if (trimmedName === '') {
            alert('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
        const isDuplicate = categories.some(
            cat => cat.text.toLowerCase() === trimmedName.toLowerCase() && 
                  cat.value !== categoryValue
        );
        
        if (isDuplicate) {
            alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const updatedCategories = categories.map(cat => 
            cat.value === categoryValue ? { ...cat, text: trimmedName } : cat
        );
        
        await updateCategories(currentCategoryType, updatedCategories);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await updateTransactionsWithNewCategory(
            categoryValue,
            categoryValue,
            trimmedName
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        await loadCategoryList(currentCategoryType);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ö, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (typeof loadCategories === 'function') {
            await loadCategories();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
async function deleteExistingCategory(categoryValue) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–î—Ä—É–≥–æ–µ".')) {
        return;
    }
    
    try {
        const categories = await getCategories(currentCategoryType);
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∫—Ä–æ–º–µ "–î—Ä—É–≥–æ–µ")
        if (categoryValue === 'dr') {
            alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—é "–î—Ä—É–≥–æ–µ" –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å');
            return;
        }
        
        const updatedCategories = categories.filter(cat => cat.value !== categoryValue);
        await updateCategories(currentCategoryType, updatedCategories);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ "–î—Ä—É–≥–æ–µ")
        await updateTransactionsWithNewCategory(
            categoryValue,
            'dr',
            '–î—Ä—É–≥–æ–µ'
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await loadCategoryList(currentCategoryType);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ö
        if (typeof loadCategories === 'function') {
            await loadCategories();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
async function updateTransactionsWithNewCategory(oldValue, newValue, newText) {
    try {
        const transactions = await getAllTransactions();
        const transactionsToUpdate = transactions.filter(
            trans => trans.category === currentCategoryType && trans.type === oldValue
        );
        
        if (transactionsToUpdate.length > 0) {
            const tx = db.transaction('transactions', 'readwrite');
            const store = tx.objectStore('transactions');
            
            transactionsToUpdate.forEach(trans => {
                const updatedTransaction = { ...trans, type: newText };
                store.put(updatedTransaction);
            });
            
            await new Promise((resolve, reject) => {
                tx.oncomplete = resolve;
                tx.onerror = (event) => reject(event.target.error);
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        throw error;
    }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function hideCategoryModal() {
    const modal = document.getElementById('categoryModal');
    modal.classList.remove('show');
    setTimeout(() => {
        modal.style.display = 'none';
    }, 300);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
function setupCategoryManagementListeners() {
    // –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('manageIncomeCategories').addEventListener('click', () => {
        showCategoryManagementModal('income');
    });
    
    document.getElementById('manageExpenseCategories').addEventListener('click', () => {
        showCategoryManagementModal('expense');
    });
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('cancelCategoryBtn').addEventListener('click', hideCategoryModal);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    setupCategoryManagementListeners();
});